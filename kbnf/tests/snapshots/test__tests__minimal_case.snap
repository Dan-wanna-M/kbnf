---
source: tests/test.rs
expression: "format!(\"{:#?}\", engine)"
---
Engine {
    union: U16U0U16U32U32U32(
        EngineBase {
            grammar: Grammar {
                start_nonterminal: "start[0]",
                rules: "start[0] ::= \"aaa\"[0];\n",
                interned_strings: InternedStrings {
                    nonterminals: StringInterner {
                        dedup: {
                            SymbolU32 {
                                value: 1,
                            }: (),
                        },
                        backend: StringBackend {
                            ends: [
                                5,
                            ],
                            buffer: "start",
                            marker: PhantomData<fn() -> string_interner::symbol::SymbolU32>,
                        },
                    },
                    terminals: StringInterner {
                        dedup: {
                            SymbolU32 {
                                value: 1,
                            }: (),
                        },
                        backend: StringBackend {
                            ends: [
                                3,
                            ],
                            buffer: "aaa",
                            marker: PhantomData<fn() -> string_interner::symbol::SymbolU32>,
                        },
                    },
                    regex_strings: StringInterner {
                        dedup: {},
                        backend: StringBackend {
                            ends: [],
                            buffer: "",
                            marker: PhantomData<fn() -> string_interner::symbol::SymbolU32>,
                        },
                    },
                    excepteds: StringInterner {
                        dedup: {},
                        backend: StringBackend {
                            ends: [],
                            buffer: "",
                            marker: PhantomData<fn() -> string_interner::symbol::SymbolU32>,
                        },
                    },
                },
                id_to_regexes: {},
                id_to_excepteds: {},
                id_to_regex_first_bytes: {},
                id_to_excepted_first_bytes: {},
                id_to_terminals: {
                    "\"aaa\"[0]": [
                        97,
                        97,
                        97,
                    ],
                },
            },
            allowed_first_bytes: [
                97,
            ],
            allowed_token_ids: [],
            earley_sets: [
                [
                    EarleyItemDebugStruct {
                        dotted_rule: "start[0] -> .\"aaa\"[0]",
                        start_position: 0,
                        state: "[0]",
                    },
                ],
            ],
            cache: [],
            to_be_completed_items: [],
            to_be_completed_items_buffer: [],
            deduplication_buffer: [],
            postdot_items: [],
            postdot_items_since_last_commit: [],
            leo_items: [],
            leo_items_buffer: [],
            already_predicted_nonterminals: [],
            finished: false,
            config: EngineConfig {
                cache_enabled: true,
                compaction_enabled: true,
            },
            regex_start_config: Config {
                look_behind: None,
                anchored: Yes,
            },
            excepted_start_config: Config {
                look_behind: None,
                anchored: No,
            },
        },
    ),
}
