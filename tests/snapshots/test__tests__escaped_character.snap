---
source: tests/test.rs
expression: "format!(\"{:#?}\", engine)"
---
Engine {
    union: U16U0U16U32U32U32(
        EngineBase {
            grammar: Grammar {
                start_nonterminal: "start[1]",
                rules: "C[0] ::= #\"\\A \\z\"[0]C[0] | \" \"[0];\nstart[1] ::= C[0]\"\n\"[1];\n",
                id_to_regexes: {
                    "#\"\\A \\z\"[0]": Dfa(
                        dense::DFA(
                        D 000000: 
                        Q 000004: 
                         *000008: 
                          000012: \x01 => 20
                          000016: 
                          000020: EOI => 8
                        
                        START-GROUP(unanchored)
                          NonWordByte => 000000
                          WordByte => 000000
                          Text => 000000
                          LineLF => 000000
                          LineCR => 000000
                          CustomLineTerminator => 000000
                        START-GROUP(anchored)
                          NonWordByte => 000016
                          WordByte => 000016
                          Text => 000012
                          LineLF => 000016
                          LineCR => 000016
                          CustomLineTerminator => 000016
                        state length: 6
                        pattern length: 1
                        flags: Flags { has_empty: false, is_utf8: true, is_always_start_anchored: true }
                        )
                        ,
                    ),
                },
                id_to_excepteds: {},
                id_to_regex_first_bytes: [
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            0,
                        ),
                        [],
                    ),
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            4,
                        ),
                        [],
                    ),
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            8,
                        ),
                        [],
                    ),
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            12,
                        ),
                        [
                            32,
                        ],
                    ),
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            16,
                        ),
                        [],
                    ),
                    (
                        "#\"\\A \\z\"[0]",
                        StateID(
                            20,
                        ),
                        [],
                    ),
                ],
                id_to_excepted_first_bytes: [],
                id_to_terminals: [
                    (
                        "\"\n\"[1]",
                        [
                            10,
                        ],
                    ),
                    (
                        "\" \"[0]",
                        [
                            32,
                        ],
                    ),
                ],
            },
            allowed_first_bytes: [],
            allowed_token_ids: [],
            token_ids_to_finish: [],
            earley_sets: [
                [
                    EarleyItemDebugStruct {
                        dotted_rule: "start[1] -> .C[0]\"\n\"[1]",
                        start_position: 0,
                        state: "",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> .#\"\\A \\z\"[0]C[0]",
                        start_position: 0,
                        state: "[3(InProgress)]",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> .\" \"[0]",
                        start_position: 0,
                        state: "[0]",
                    },
                ],
                [
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> #\"\\A \\z\"[0].C[0]",
                        start_position: 0,
                        state: "",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> .#\"\\A \\z\"[0]C[0]",
                        start_position: 0,
                        state: "[5(Accept)]",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "start[1] -> C[0].\"\n\"[1]",
                        start_position: 0,
                        state: "[0]",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> .#\"\\A \\z\"[0]C[0]",
                        start_position: 1,
                        state: "[3(InProgress)]",
                    },
                    EarleyItemDebugStruct {
                        dotted_rule: "C[0] -> .\" \"[0]",
                        start_position: 1,
                        state: "[0]",
                    },
                ],
            ],
            cache: [],
            to_be_completed_items: [],
            to_be_completed_items_buffer: [],
            deduplication_buffer: [],
            postdot_items: [
                (
                    DottedDebugStruct {
                        postdot_nonterminal: "C[0]",
                        column: 0,
                    },
                    NormalItems(
                        [
                            EarleyItemDebugStruct {
                                dotted_rule: "start[1] -> .C[0]\"\n\"[1]",
                                start_position: 0,
                                state: "",
                            },
                        ],
                    ),
                ),
                (
                    DottedDebugStruct {
                        postdot_nonterminal: "C[0]",
                        column: 1,
                    },
                    LeoEligible(
                        EarleyItemDebugStruct {
                            dotted_rule: "C[0] -> #\"\\A \\z\"[0].C[0]",
                            start_position: 0,
                            state: "",
                        },
                    ),
                ),
            ],
            postdot_items_since_last_commit: [],
            leo_items: [],
            leo_items_buffer: [],
            already_predicted_nonterminals: [],
            finished: false,
            config: EngineConfig {
                cache_enabled: true,
                compaction_enabled: true,
            },
            regex_start_config: Config {
                look_behind: None,
                anchored: Yes,
            },
            excepted_start_config: Config {
                look_behind: None,
                anchored: No,
            },
        },
    ),
}
